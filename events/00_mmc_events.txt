# Audax Validator EnableCommentMetadata
namespace = mmc

character_event = { #Event to convert a holding into a military command
	id = mmc.10
	desc = EVTDESC_MMC_10
	picture = GFX_evt_spymaster
	border = GFX_event_normal_frame_intrigue
	is_triggered_only = yes #decision make_military
	hide_from = yes
	
	ai = no
	
	#ROOT - the title owner
	#FROM - the title to convert
	#FROMFROM - the decision maker
	#target_make_military - the title to convert
	
	trigger = {
		ROOT = { character = FROMFROM } #The event should be firing for the title holder
	}

	immediate = {
	
	}
	
	option = { #Convert
		name = EVTOPT_A_MMC_10
		custom_tooltip = {
			text = TOOLTIP_MMC_convert_military
			hidden_tooltip = {
				event_target:target_make_military = {
					set_title_flag = military_command
					set_title_flag = new_military_command #Used to track the temp military commands
				}
			}
		}
		# any_realm_character = { #Your family will be upset that you're not granting them titles
			# limit = {
				# is_ruler = no
				# is_close_relative = ROOT
				# is_liege_or_above = ROOT
				# age = 14
				# NOT = { trait = incapable }
				# OR = {
					# is_primary_heir = no
					# sibling = ROOT
				# }	
				# OR = {
					# is_female = no
					# ROOT = {
						# primary_title = {
							# OR = {
								# has_law = enatic_cognatic_succession
								# has_law = enatic_succession
							# }
						# }
					# }
					# AND = { #Females must be legitimate blood relatives to ask for titles under true cognatic
						# ROOT = { 
							# dynasty = PREV
							# primary_title = { has_law = true_cognatic_succession }
						# }
						# NOT = { trait = bastard }
					# }	
				# }
				# OR = {
					# is_female = yes
					# ROOT = {
						# primary_title = {
							# OR = {
								# has_law = cognatic_succession
								# has_law = agnatic_succession
								# has_law = true_cognatic_succession
							# }
						# }
					# }
				# }
				# OR = {	
					# has_ambition = obj_wants_landed_title
					# trait = ambitious
					# trait = familyperson
					# has_opinion_modifier = { who = ROOT modifier = opinion_promised_title }
					# has_opinion_modifier = { who = ROOT modifier = opinion_denied_title }
					# AND = {
						# OR = {
							# trait = proud
							# trait = envious
							# trait = greedy
						# }	
						# NOT = { trait = content }
					# }
				# }	
				# can_press_claims_trigger = yes
				# NOT = { trait = drowned }
				# NOT = { trait = disinherited }
				
				# #Some characters don't mind kin gaining title
				# NOR = {
					# is_close_relative = FROMFROM
					# OR = {
						# opinion = { who = FROMFROM value = 20 }
						# NOT = { is_older_than = FROMFROM }
					# }
					# OR = {
						# trait = just
						# trait = honorable
						# trait = familyperson
						# trait = patient
					# }
					# NOT = { trait = ambitious }
					# NOT = { trait = envious }
				# }
			# }	
			# opinion = {
				# who = ROOT
				# modifier = opinion_did_not_give_me_title
				# months = 60
			# }	
		# }
		# any_realm_character = { #Your vassals will be upset that you're trying to retain titles -- maybe tyranical even?
			# limit = {
				# is_ruler = yes
				# is_liege_or_above = ROOT
				# higher_real_tier_than = baron
				# NOR = {
					# is_close_relative = ROOT
					# dynasty = ROOT
				# }
			# }
			# opinion = {
				# who = ROOT
				# modifier = opinion_did_not_give_me_title #TODO: add a custom opinion later
				# months = 60
			# }
		# }
	}
	option = { #Don't convert
		name = EVTOPT_B_MMC_10
	}
	
	after = {
		clear_event_target = target_make_military
	}

}

character_event = { #This is a ping event to get the scoping correct for the unmilitary-ing
	id = mmc.20
	is_triggered_only = yes #decision unmake_military
	hide_window = yes 
	
	#ROOT - the title owner
	#FROM - the title to convert
	#FROMFROM - the decision maker
	#target_unmake_military - the title to convert
	
	trigger = {
		event_target:target_unmake_military = { owner = { character = ROOT } } #This event should be firing for the event of the title holder
	}

	option = {
		FROMFROM = { character_event = { id = mmc.25 } } #Send the event to the original decision maker
	}
}

character_event = { #This event converts a non-historical military command into a regular holding
	id = mmc.25
	picture = GFX_evt_spymaster
	is_triggered_only = yes #event mmc.20
	
	#ROOT - the decision maker
	#FROM - the title owner
	#FROMFROM - the title to convert
	#FROMFROMFROM - the decision maker
	#target_unmake_military - the title to convert
	
	desc = { #Convert my title
		trigger = { FROM = { character = ROOT } }
		text = EVTDESC_MMC_25.1
	}
	desc = { #Convert my vassal's title
		trigger = { NOT = { FROM = { character = ROOT } } }
		text = EVTDESC_MMC_25.2
	}
	
	trigger = {
		ai = no #Only players can do this -- for now
		FROM = { #This should be the title holder
			OR = {
				character = ROOT #Must either be owned by ROOT
				is_liege_or_above = ROOT #Or a vassal of ROOT
			}
		}
	}
	
	immediate = {
	
	}
	
	option = { #Convert my title
		name = EVTOPT_A_MMC_25
		trigger = { FROM = { character = ROOT } }
		custom_tooltip = {
			text = TOOLTIP_MMC_convert_regular
			hidden_tooltip = {
				event_target:target_unmake_military = {
					clr_title_flag = new_military_command
					clr_title_flag = military_command
				}
			}
		}
	}
	option = { #Convert my vassal's title
		name = EVTOPT_B_MMC_25
		trigger = { NOT = { FROM = { character = ROOT } } }
		custom_tooltip = {
			text = TOOLTIP_MMC_convert_regular
			hidden_tooltip = {
				event_target:target_unmake_military = {
					clr_title_flag = new_military_command
					clr_title_flag = military_command
				}
				FROM = {
					if = {
						limit = { primary_title = { event_target:target_unmake_military = { title = PREV } } }
						if = {
							limit = { event_target:target_unmake_military = { holding_type = castle } }
							set_government_type = feudal_government
							event_target:target_unmake_military = { succession = primogeniture }
						}
						else = {
							set_government_type = republic_government
							event_target:target_unmake_military = { succession = open_elective }
						}
					}
					recalc_succession = yes
				}
			}
		}
		FROM = {
			opinion = {
				who = ROOT
				modifier = opinion_granted_barony
				months = 60
			}
		}
	}
	option = { #Don't convert
		name = EVTOPT_C_MMC_25
	}
	
	after = {
		clear_event_target = target_unmake_military
	}

}

character_event = { # Used to ping to the granter
	id = mmc.100
	is_triggered_only = yes # fired title_mmc_marquis_dornish_marshes gain_effect
	hide_window = yes
	# Stack when fired by title grant
	# This - title holder
	# ROOT - title holder
	# FROM - title holder
	# FROMFROM - title granter
	
	trigger = {
		has_minor_title = title_mmc_marquis_dornish_marshes
	}
	
	immediate = {
		log = "Debug: event mmc.100"
		print_scope_effect = yes
		if = { # Try and find some random schmuck we can hate on
			limit = {
				any_playable_ruler = {
					NOR = {
						culture = FROMFROM
						culture = ROOT
						same_realm = FROMFROM
					}
					any_demesne_province = {
						any_neighbor_province = {
							ROOT = {
								any_realm_province = {
									province = PREVPREV
								}
							}
						}
					}
				}
			}
			random_playable_ruler = {
				limit = {
					NOR = {
						culture = FROMFROM
						culture = ROOT
						same_realm = FROMFROM
					}
					any_demesne_province = {
						any_neighbor_province = {
							ROOT = {
								any_realm_province = {
									province = PREVPREV
								}
							}
						}
					}
				}
				log = "Debug: The [This.GetInsultAdjective] [This.GetBestName] ([This.GetID])"
				top_liege = { save_event_target_as = target_enemy_schmuck }
			}
		}
		else_if = { # Try and find some random schmuck we can hate on
			limit = {
				any_playable_ruler = {
					NOT = { same_realm = FROMFROM }
					any_demesne_province = {
						any_neighbor_province = {
							ROOT = {
								any_realm_province = {
									province = PREVPREV
								}
							}
						}
					}
				}
			}
			random_playable_ruler = {
				limit = {
					NOT = { same_realm = FROMFROM }
					any_demesne_province = {
						any_neighbor_province = {
							ROOT = {
								any_realm_province = {
									province = PREVPREV
								}
							}
						}
					}
				}
				log = "Debug: The [This.GetInsultAdjective] [This.GetBestName] ([This.GetID])"
				top_liege = { save_event_target_as = target_enemy_schmuck }
			}
		}
	}
	
	option = {
		add_character_modifier = {
			modifier = marquis_modifier
			duration = -1
		}
		FROMFROM = {
			letter_event = { id = mmc.101 }
		}
	}
}

letter_event = { # Used to notify player of start of whatever event chain
	id = mmc.101
	is_triggered_only = yes # fire from event mmc.100
	border = "GFX_event_letter_frame_war"
	desc = EVTDESC_MMC_101 # Check key for this, GetInsultNoun seems to be screwy
	# Stack when fired by title grant
	# This - title granter
	# ROOT - title granter
	# FROM - title holder
	# FROMFROM - title holder
	# FROMFROMFROM - title granter
	# target_enemy_schmuck - random shmuck
	
	trigger = {
		FROM = {
			has_minor_title = title_mmc_marquis_dornish_marshes
		}
	}
	
	immediate = {
		log = "Debug: event mmc.101"
		print_scope_effect = yes
	}
	
	option = {
		name = {
			text = EVTOPT_OK_MMC_101
			trigger = {
				NOT = { has_house_words_trigger = yes }
			}
		}
		name = {
			text = EVTOPTGETHOUSEWORDS
			trigger = {
				has_house_words_trigger = yes
			}
		}
		custom_tooltip = {
			text = TOOLTIPmmcOK.10
		}
	}
}

province_event = { # Fortifications are built
	id = mmc.110
	hide_window = yes
	
	trigger = {
		NOT = { has_province_modifier = fortified_marches }
		owner = {
			OR = {
				has_character_modifier = marquis_modifier
				any_liege = { has_character_modifier = marquis_modifier }
			}
		}
	}
	
	mean_time_to_happen = {
		months = 24
	}
	
	immediate = {
		owner = {
			if = {
				limit = {
					has_character_modifier = marquis_modifier
				}
				save_event_target_as = target_marquis
			}
			else = {
				any_liege = {
					limit = { has_character_modifier = marquis_modifier }
					save_event_target_as = target_marquis
				}
			}
		}
	}
	
	option = {
		owner = {
			character_event = { id = mmc.111 }
		}
	}

}
character_event = { # Notify title holder
	id = mmc.111
	picture = GFX_evt_son_asking_father
	is_triggered_only = yes # fired from event mmc.110
	show_root = yes
	
	# Stack
	# This - province owner
	# Root - province owner
	# From - province
	# target_marquis - marquis - duh!
	
	desc = { # I'm the Marquis
		trigger = {
			NOT = { event_target:target_marquis = { character = ROOT } }
		}
		text = EVTDESC_MMC_111.1
	}
	desc = { # I'm not the Marquis
		trigger = {
			event_target:target_marquis = { character = ROOT }
		}
		text = EVTDESC_MMC_111.2
	}
	
	trigger = {
		FROM = {
			holder_scope = {
				character = ROOT
			}
		}
	}
	
	option = { # I'm the Marquis and this is my demesne so I should notify my liege
		name = EVTOPT_A_MMC_111
		trigger = {
			event_target:target_marquis = { character = ROOT }
		}
		FROM = {
			add_province_modifier = { modifier = fortified_marches duration = -1 }
		}
		liege = {
			hidden_tooltip = {
				ROOT = { character_event = { id = mmc.113 } }
			}
		}
	}
	
	option = { # My province has been upgraded and I should notify the Marquis about this
		name = EVTOPT_B_MMC_111
		trigger = {
			NOT = { event_target:target_marquis = { character = ROOT } }
		}
		FROM = {
			add_province_modifier = { modifier = fortified_marches duration = -1 }
		}
		event_target:target_marquis = {
			tooltip = { show_portrait = yes }
			letter_event = { id = mmc.112 }
		}
	}

}

letter_event = { # Notify Marquis that his/her hard work has paid off in my province
	id = mmc.112
	border = "GFX_event_letter_frame_war"
	desc = EVTDESC_MMC_112
	is_triggered_only = yes # fired from event mmc.111
	
	# Stack
	# This - marquis
	# Root - marquis
	# From - province owner
	# FromFrom - province
	# target_marquis - marquis - duh!
	
	trigger = {
		has_character_modifier = marquis_modifier
	}
	
	option = {
		name = EVTOPT_OK_MMC_112
		liege = {
			tooltip = { show_portrait = yes }
			letter_event = { id = mmc.115 }
		}
	}

}

character_event = { # Used to get the stack right so we can reuse mmc.115, I guess
	id = mmc.113
	is_triggered_only = yes # fired by event mmc.
	hide_window = yes
	
	# Stack
	# This - province owner/marquis
	# Root - province owner/marquis
	# From - province owner/marquis
	# FromFrom - province
	# target_marquis - marquis - duh!
	
	trigger = {
		has_character_modifier = marquis_modifier
	}
	
	option = {
		liege = {
			letter_event = { id = mmc.115 }
		}
	}
}

letter_event = { # Liege notification event for adding fortifications
	id = mmc.115
	border = "GFX_event_letter_frame_war"
	is_triggered_only = yes # fired from event mmc.112 or mmc.113
	
	# Stack when fired from mmc.112
	# This - liege of marquis
	# Root - liege of marquis
	# From - marquis
	# FromFrom - province owner
	# FromFromFrom - province
	# target_marquis - marquis - duh!
	
	# Stack when fired from mmc.113
	# This - liege of marquis
	# Root - liege of marquis
	# From - province owner/marquis
	# FromFrom - province owner/marquis
	# FromFromFrom - province
	# target_marquis - marquis - duh!
	
	desc = { # Marquis demesne title
		trigger = { event_target:target_marquis = { character = FROMFROM } }
		text = EVTDESC_MMC_115.demesne
	}
	desc = { # Marquis realm title
		trigger = { NOT = { event_target:target_marquis = { character = FROMFROM } } }
		text = EVTDESC_MMC_115.realm
	}
	
	trigger = {
		FROM = {
			has_character_modifier = marquis_modifier
			is_liege_or_above = ROOT
		}
	}
	
	option = {
		name = {
			text = EVTOPT_OK_MMC_115
			trigger = {
				NOT = { has_house_words_trigger = yes }
			}
		}
		name = {
			text = EVTOPTGETHOUSEWORDS
			trigger = {
				has_house_words_trigger = yes
			}
		}
		FROMFROMFROM = {
			add_province_modifier = { modifier = fortified_marches duration = -1 }
		}
		if = {
			limit = { NOT = { event_target:target_marquis = { character = FROMFROM } } }
			FROMFROM = { tooltip = { show_portrait = yes } }
		}
	}

}

# Audax Validator "." Ignore_NEXT
character_event = {
	id = mmc.999
	is_triggered_only = yes
	hide_window = yes
	
	option = {
		print_scope_effect = yes
	}
}
